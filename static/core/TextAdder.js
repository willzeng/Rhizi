// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define([], function() {
    var TextAdder;
    return TextAdder = (function(_super) {
      __extends(TextAdder, _super);

      function TextAdder(options) {
        this.options = options;
        this.makeLink = __bind(this.makeLink, this);
        this.createTriple = __bind(this.createTriple, this);
        TextAdder.__super__.constructor.call(this);
      }

      TextAdder.prototype.init = function(instances) {
        var $addNode, $addProfileHelper, $inputArea, $inputButton,
          _this = this;
        this.dataController = instances['local/Neo4jDataController'];
        this.graphModel = instances['GraphModel'];
        this.selection = instances['NodeSelection'];
        this.linkSelection = instances['LinkSelection'];
        this.graphView = instances['GraphView'];
        this.nodeEdit = instances['local/NodeEdit'];
        this.expander = instances['Expander'];
        $addNode = $("<div id='add-node-text' class='result-element'><span>Create in the Rhizi</span><br/><br/></div>").appendTo($('#omniBox'));
        $addProfileHelper = $("<div class='node-profile-helper'></div>").appendTo($('#omniBox'));
        $inputArea = $("<textarea id='textAdder-input' placeholder='@rhizi makes @graphs' rows='5' cols='32'></textarea>").appendTo($addNode);
        $inputButton = $("<input type='button' value='Create'></input>").appendTo($addNode);
        $inputButton.click(function() {
          _this.createTriple(_this.parseSyntax($inputArea.val()));
          $inputArea.val("");
          return $inputArea.focus();
        });
        return $inputArea.keyup(function(e) {
          if (e.keyCode === 13) {
            _this.createTriple(_this.parseSyntax($inputArea.val()));
            $inputArea.val("");
            return $inputArea.focus();
          }
        });
      };

      TextAdder.prototype.createTriple = function(tripleList) {
        var newLink, node, sourceExists, sourceNode, targetExists, targetNode, workspaceNodes, _i, _j, _len, _len1,
          _this = this;
        console.log("tripleList", tripleList);
        sourceExists = false;
        targetExists = false;
        if (tripleList.length === 1) {
          node = {
            name: tripleList[0]
          };
          console.log("onenode");
          return this.dataController.nodeAdd(node, function(newNode) {
            _this.graphModel.putNode(newNode);
            return _this.selection.toggleSelection(newNode);
          });
        } else {
          sourceNode = {
            name: tripleList[0]
          };
          newLink = {
            "properties": {
              name: tripleList[1]
            }
          };
          targetNode = {
            name: tripleList[2]
          };
          workspaceNodes = this.graphModel.getNodes();
          node = "";
          for (_i = 0, _len = workspaceNodes.length; _i < _len; _i++) {
            node = workspaceNodes[_i];
            if (node.name === sourceNode.name) {
              sourceExists = true;
              sourceNode = node;
              console.log("sourceExists");
              break;
            } else {
              sourceExists = false;
            }
          }
          node = "";
          for (_j = 0, _len1 = workspaceNodes.length; _j < _len1; _j++) {
            node = workspaceNodes[_j];
            if (node.name === targetNode.name) {
              targetExists = true;
              targetNode = node;
              console.log("targetExists");
              break;
            } else {
              targetExists = false;
            }
          }
          if (sourceExists) {
            if (targetExists) {
              return this.makeLink(newLink, sourceNode, targetNode);
            } else {
              return this.dataController.nodeAdd(targetNode, function(tNode) {
                _this.graphModel.putNode(tNode);
                return _this.makeLink(newLink, sourceNode, tNode);
              });
            }
          } else {
            if (targetExists) {
              return this.dataController.nodeAdd(sourceNode, function(sNode) {
                _this.graphModel.putNode(sNode);
                return _this.makeLink(newLink, sNode, targetNode);
              });
            } else {
              return this.dataController.nodeAdd(sourceNode, function(sNode) {
                _this.graphModel.putNode(sNode);
                return _this.dataController.nodeAdd(targetNode, function(tNode) {
                  _this.graphModel.putNode(tNode);
                  return _this.makeLink(newLink, sNode, tNode);
                });
              });
            }
          }
        }
      };

      TextAdder.prototype.makeLink = function(newLink, sourceNode, targetNode) {
        var _this = this;
        newLink["source"] = sourceNode;
        newLink["target"] = targetNode;
        console.log("the new link", newLink);
        return this.dataController.linkAdd(newLink, function(link) {
          if (link.start === sourceNode['_id']) {
            link.source = sourceNode;
            link.target = targetNode;
          } else {
            link.source = targetNode;
            link.target = sourceNode;
          }
          return _this.graphModel.putLink(link);
        });
      };

      TextAdder.prototype.parseSyntax = function(input) {
        var linkData, match, pattern, tags, text;
        text = input;
        console.log("text", text);
        pattern = new RegExp(/(\@[a-z][a-z0-9-_]*)/ig);
        tags = [];
        while (match = pattern.exec(text)) {
          tags.push(match[1].trim());
        }
        linkData = text.replace(/(\@[a-z][a-z0-9-_]*)/ig, "").trim();
        if (tags.length > 1) {
          return [tags[0].slice(1), linkData, tags[1].slice(1)];
        } else {
          return [tags[0].slice(1)];
        }
      };

      return TextAdder;

    })(Backbone.View);
  });

}).call(this);
