// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define([], function() {
    var AddNode;
    return AddNode = (function(_super) {
      __extends(AddNode, _super);

      function AddNode(options) {
        this.options = options;
        AddNode.__super__.constructor.call(this);
      }

      AddNode.prototype.buttons = [
        {
          id: 'participant',
          fields: {
            name: '',
            url: '',
            email: '',
            type: 'participant',
            size: 10,
            color: '#66CCDD'
          }
        }, {
          id: 'mentor',
          fields: {
            name: '',
            url: '',
            email: '',
            type: 'mentor',
            size: 10,
            color: '#FFBB22'
          }
        }, {
          id: 'project',
          fields: {
            name: '',
            url: '',
            description: '',
            type: 'project',
            size: 16,
            color: '#F56545'
          }
        }, {
          id: 'resource',
          fields: {
            name: '',
            url: '',
            description: '',
            type: 'resource',
            size: 8,
            color: '#BBE535'
          }
        }, {
          id: 'theme',
          fields: {
            name: '',
            description: '',
            type: 'theme',
            size: 24,
            color: '#77DDBB'
          }
        }, {
          id: 'other',
          fields: {
            name: '',
            description: '',
            size: 10,
            color: '#A9A9A9'
          }
        }
      ];

      AddNode.prototype.init = function(instances) {
        var $addNode, $addProfileHelper, $omniBox, b, button, capitalize, lazy_button_template, _i, _len, _ref, _results;
        this.dataController = instances['local/Neo4jDataController'];
        this.graphModel = instances['GraphModel'];
        this.selection = instances['NodeSelection'];
        this.graphView = instances['GraphView'];
        this.nodeEdit = instances['local/NodeEdit'];
        capitalize = function(str) {
          return str[0].toUpperCase() + str.slice(1);
        };
        lazy_button_template = function(name) {
          return "<span id=\"add-" + name + "-button\">" + (capitalize(name)) + "</span>";
        };
        $omniBox = $('#omniBox');
        $addNode = $("<div id=\"add-node\" class=\"result-element\">                      <span>Add Something</span>                      <br/>" + (((function() {
          var _i, _len, _ref, _results;
          _ref = this.buttons;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            b = _ref[_i];
            _results.push(lazy_button_template(b.id));
          }
          return _results;
        }).call(this)).join('')) + "</div>").appendTo($omniBox);
        $addProfileHelper = $('<div class="node-profile-helper"></div>').appendTo($omniBox);
        _ref = this.buttons;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          button = _ref[_i];
          _results.push(this.initButton(button.id, button.fields));
        }
        return _results;
      };

      AddNode.prototype.initButton = function(name, fields) {
        var _this = this;
        return $("#add-" + name + "-button").click(function() {
          var k, options, v;
          options = {};
          if (fields != null) {
            for (k in fields) {
              v = fields[k];
              options[k] = v;
            }
          }
          return _this.createNode(options);
        });
      };

      AddNode.prototype.createNode = function(node) {
        var _this = this;
        return this.dataController.nodeAdd(node, function(datum) {
          datum.fixed = true;
          datum.px = ($(window).width() / 2 - _this.graphView.currentTranslation[0]) / _this.graphView.currentScale;
          datum.py = ($(window).height() / 2 - _this.graphView.currentTranslation[1]) / _this.graphView.currentScale;
          _this.graphModel.putNode(datum);
          _this.selection.toggleSelection(datum);
          return _this.nodeEdit.editNode(datum, $($('.node-profile').slice(-1)[0]), _this.nodeEdit.blacklist);
        });
      };

      return AddNode;

    })(Backbone.View);
  });

}).call(this);
