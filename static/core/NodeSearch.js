// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define([], function() {
    var NodeSearch;
    return NodeSearch = (function(_super) {
      __extends(NodeSearch, _super);

      NodeSearch.prototype.events = {
        "typeahead:selected input": "addNode"
      };

      function NodeSearch(options) {
        this.options = options;
        NodeSearch.__super__.constructor.call(this);
      }

      NodeSearch.prototype.init = function(instances) {
        var _this = this;
        this.graphModel = instances["GraphModel"];
        this.listenTo(instances["KeyListener"], "down:191", function(e) {
          _this.$("input").focus();
          return e.preventDefault();
        });
        this.render();
        return instances["Layout"].addPlugin(this.el, this.options.pluginOrder, 'Search');
      };

      NodeSearch.prototype.render = function() {
        var $container, $input;
        $container = $("<div />").addClass("node-search-container");
        $input = $("<input type=\"text\" placeholder=\"Node Search...\">").addClass("node-search-input");
        $container.append($input);
        this.$el.append($container);
        $input.typeahead({
          prefetch: this.options.prefetch,
          local: this.options.local,
          name: "nodes",
          limit: 100
        });
        return this;
      };

      NodeSearch.prototype.addNode = function(e, datum) {
        var h, newNode, newNodeHash;
        newNode = {
          text: datum.value,
          '_id': -1
        };
        h = this.graphModel.get("nodeHash");
        newNodeHash = h(newNode);
        if (!_.some(this.graphModel.get("nodes"), function(node) {
          return h(node) === newNodeHash;
        })) {
          this.graphModel.putNode(newNode);
        }
        return $(e.target).blur();
      };

      return NodeSearch;

    })(Backbone.View);
  });

}).call(this);
