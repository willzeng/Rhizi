0 info it worked if it ends with ok
1 verbose cli [ 'nodejs', '/usr/bin/npm', 'install', 'jade' ]
2 info using npm@1.2.11
3 info using node@v0.8.20
4 verbose read json /home/jcole/code/som/WikiNets/package.json
5 verbose read json /home/jcole/code/som/WikiNets/node_modules/jade/package.json
6 verbose read json /home/jcole/code/som/WikiNets/node_modules/coffee-script/package.json
7 verbose read json /home/jcole/code/som/WikiNets/node_modules/express/package.json
8 verbose read json /home/jcole/code/som/WikiNets/node_modules/neo4js/package.json
9 verbose from cache /home/jcole/code/som/WikiNets/package.json
10 verbose readDependencies using package.json deps
11 verbose cache add [ 'jade@0.20.0', null ]
12 verbose cache add name=undefined spec="jade@0.20.0" args=["jade@0.20.0",null]
13 verbose parsed url { pathname: 'jade@0.20.0',
13 verbose parsed url   path: 'jade@0.20.0',
13 verbose parsed url   href: 'jade@0.20.0' }
14 verbose cache add name="jade" spec="0.20.0" args=["jade","0.20.0"]
15 verbose parsed url { pathname: '0.20.0', path: '0.20.0', href: '0.20.0' }
16 verbose addNamed [ 'jade', '0.20.0' ]
17 verbose addNamed [ '0.20.0', '0.20.0' ]
18 silly lockFile a24c3910-jade-0-20-0 jade@0.20.0
19 verbose lock jade@0.20.0 /home/jcole/.npm/a24c3910-jade-0-20-0.lock
20 verbose url raw jade/0.20.0
21 verbose url resolving [ 'https://registry.npmjs.org/', './jade/0.20.0' ]
22 verbose url resolved https://registry.npmjs.org/jade/0.20.0
23 info trying registry request attempt 1 at 20:57:34
24 http GET https://registry.npmjs.org/jade/0.20.0
25 http 200 https://registry.npmjs.org/jade/0.20.0
26 silly registry.get cb [ 200,
26 silly registry.get   { vary: 'Accept',
26 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
26 silly registry.get     etag: '"136H7TROSI1ZVENTU49TAFGRJ"',
26 silly registry.get     date: 'Thu, 31 Oct 2013 03:57:36 GMT',
26 silly registry.get     'content-type': 'application/json',
26 silly registry.get     'content-length': '913' } ]
27 silly lockFile 2bc36025-y-npmjs-org-jade-jade-0-20-0-tgz https://registry.npmjs.org/jade/-/jade-0.20.0.tgz
28 verbose lock https://registry.npmjs.org/jade/-/jade-0.20.0.tgz /home/jcole/.npm/2bc36025-y-npmjs-org-jade-jade-0-20-0-tgz.lock
29 verbose addRemoteTarball [ 'https://registry.npmjs.org/jade/-/jade-0.20.0.tgz',
29 verbose addRemoteTarball   '2c8f3742bcf87dc49c88e505c01f72563d1fcf2e' ]
30 info retry fetch attempt 1 at 20:57:36
31 verbose fetch to= /home/jcole/tmp/npm-5179/1383191856118-0.285349850775674/tmp.tgz
32 http GET https://registry.npmjs.org/jade/-/jade-0.20.0.tgz
33 http 200 https://registry.npmjs.org/jade/-/jade-0.20.0.tgz
34 silly shasum updated bytes 40960
35 silly shasum updated bytes 30720
36 info shasum 2c8f3742bcf87dc49c88e505c01f72563d1fcf2e
36 info shasum /home/jcole/tmp/npm-5179/1383191856118-0.285349850775674/tmp.tgz
37 verbose tar unpack /home/jcole/tmp/npm-5179/1383191856118-0.285349850775674/tmp.tgz
38 silly lockFile f2e4b5e9-856118-0-285349850775674-package /home/jcole/tmp/npm-5179/1383191856118-0.285349850775674/package
39 verbose lock /home/jcole/tmp/npm-5179/1383191856118-0.285349850775674/package /home/jcole/.npm/f2e4b5e9-856118-0-285349850775674-package.lock
40 silly lockFile 34eb0890-856118-0-285349850775674-tmp-tgz /home/jcole/tmp/npm-5179/1383191856118-0.285349850775674/tmp.tgz
41 verbose lock /home/jcole/tmp/npm-5179/1383191856118-0.285349850775674/tmp.tgz /home/jcole/.npm/34eb0890-856118-0-285349850775674-tmp-tgz.lock
42 silly gunzTarPerm modes [ '755', '644' ]
43 silly gunzTarPerm extractEntry .gitignore
44 silly gunzTarPerm extractEntry .gitmodules
45 silly gunzTarPerm extractEntry .npmignore
46 silly gunzTarPerm extractEntry .travis.yml
47 silly gunzTarPerm extractEntry History.md
48 silly gunzTarPerm extractEntry index.js
49 silly gunzTarPerm extractEntry jade.js
50 silly gunzTarPerm extractEntry jade.min.js
51 silly gunzTarPerm extractEntry LICENSE
52 silly gunzTarPerm extractEntry Makefile
53 silly gunzTarPerm extractEntry package.json
54 silly gunzTarPerm extractEntry Readme.md
55 silly gunzTarPerm extractEntry runtime.js
56 silly gunzTarPerm extractEntry runtime.min.js
57 silly gunzTarPerm extractEntry bin/jade
58 silly gunzTarPerm extractEntry support/benchmark.js
59 silly gunzTarPerm extractEntry support/compile.js
60 silly gunzTarPerm extractEntry support/foot.js
61 silly gunzTarPerm extractEntry support/head.js
62 silly gunzTarPerm extractEntry testing/head.jade
63 silly gunzTarPerm extractEntry testing/index.jade
64 silly gunzTarPerm extractEntry testing/index.js
65 silly gunzTarPerm extractEntry testing/layout.jade
66 silly gunzTarPerm extractEntry testing/user.jade
67 silly gunzTarPerm extractEntry examples/attributes.jade
68 silly gunzTarPerm extractEntry examples/attributes.js
69 silly gunzTarPerm extractEntry examples/browser.html
70 silly gunzTarPerm extractEntry examples/code.jade
71 silly gunzTarPerm extractEntry examples/code.js
72 silly gunzTarPerm extractEntry examples/csrf.jade
73 silly gunzTarPerm extractEntry examples/csrf.js
74 silly gunzTarPerm extractEntry examples/dynamicscript.jade
75 silly gunzTarPerm extractEntry examples/dynamicscript.js
76 silly gunzTarPerm extractEntry examples/each.jade
77 silly gunzTarPerm extractEntry examples/each.js
78 silly gunzTarPerm extractEntry examples/extend-layout.jade
79 silly gunzTarPerm extractEntry examples/extend.jade
80 silly gunzTarPerm extractEntry examples/extend.js
81 silly gunzTarPerm extractEntry examples/form.jade
82 silly gunzTarPerm extractEntry examples/form.js
83 silly gunzTarPerm extractEntry examples/includes.jade
84 silly gunzTarPerm extractEntry examples/includes.js
85 silly gunzTarPerm extractEntry examples/layout-debug.js
86 silly gunzTarPerm extractEntry examples/layout.jade
87 silly gunzTarPerm extractEntry examples/layout.js
88 silly gunzTarPerm extractEntry examples/mixins.jade
89 silly gunzTarPerm extractEntry examples/mixins.js
90 silly gunzTarPerm extractEntry examples/model.jade
91 silly gunzTarPerm extractEntry examples/model.js
92 silly gunzTarPerm extractEntry examples/nested-filters.jade
93 silly gunzTarPerm extractEntry examples/nested-filters.js
94 silly gunzTarPerm extractEntry examples/pet.jade
95 silly gunzTarPerm extractEntry examples/rss.jade
96 silly gunzTarPerm extractEntry examples/rss.js
97 silly gunzTarPerm extractEntry examples/text.jade
98 silly gunzTarPerm extractEntry examples/text.js
99 silly gunzTarPerm extractEntry examples/whitespace.jade
100 silly gunzTarPerm extractEntry examples/whitespace.js
101 silly gunzTarPerm extractEntry examples/includes/head.jade
102 silly gunzTarPerm extractEntry examples/includes/foot.jade
103 silly gunzTarPerm extractEntry examples/includes/scripts.jade
104 silly gunzTarPerm extractEntry examples/includes/style.css
105 silly gunzTarPerm extractEntry examples/mixins/profile.jade
106 silly gunzTarPerm extractEntry examples/mixins/dialog.jade
107 silly gunzTarPerm extractEntry lib/compiler.js
108 silly gunzTarPerm extractEntry lib/doctypes.js
109 silly gunzTarPerm extractEntry lib/filters.js
110 silly gunzTarPerm extractEntry lib/inline-tags.js
111 silly gunzTarPerm extractEntry lib/jade.js
112 silly gunzTarPerm extractEntry lib/lexer.js
113 silly gunzTarPerm extractEntry lib/parser.js
114 silly gunzTarPerm extractEntry lib/runtime.js
115 silly gunzTarPerm extractEntry lib/self-closing.js
116 silly gunzTarPerm extractEntry lib/utils.js
117 silly gunzTarPerm extractEntry lib/index.js
118 silly gunzTarPerm extractEntry lib/nodes/block-comment.js
119 silly gunzTarPerm extractEntry lib/nodes/block.js
120 silly gunzTarPerm extractEntry lib/nodes/case.js
121 silly gunzTarPerm extractEntry lib/nodes/code.js
122 silly gunzTarPerm extractEntry lib/nodes/comment.js
123 silly gunzTarPerm extractEntry lib/nodes/doctype.js
124 silly gunzTarPerm extractEntry lib/nodes/each.js
125 silly gunzTarPerm extractEntry lib/nodes/filter.js
126 silly gunzTarPerm extractEntry lib/nodes/index.js
127 silly gunzTarPerm extractEntry lib/nodes/literal.js
128 silly gunzTarPerm extractEntry lib/nodes/mixin.js
129 silly gunzTarPerm extractEntry lib/nodes/node.js
130 silly gunzTarPerm extractEntry lib/nodes/tag.js
131 silly gunzTarPerm extractEntry lib/nodes/text.js
132 silly gunzTarPerm extractEntry test/filters.test.js
133 silly gunzTarPerm extractEntry test/jade.test.js
134 silly gunzTarPerm extractEntry test/fixtures/case-blocks.html
135 silly gunzTarPerm extractEntry test/fixtures/case-blocks.jade
136 silly gunzTarPerm extractEntry test/fixtures/case.html
137 silly gunzTarPerm extractEntry test/fixtures/case.jade
138 silly gunzTarPerm extractEntry test/fixtures/conditional-comment.html
139 silly gunzTarPerm extractEntry test/fixtures/conditional-comment.jade
140 silly gunzTarPerm extractEntry test/fixtures/include-html.html
141 silly gunzTarPerm extractEntry test/fixtures/include-html.jade
142 silly gunzTarPerm extractEntry test/fixtures/invalid.jade
143 silly gunzTarPerm extractEntry test/fixtures/layout.jade
144 silly gunzTarPerm extractEntry test/fixtures/mixins.html
145 silly gunzTarPerm extractEntry test/fixtures/mixins.jade
146 silly gunzTarPerm extractEntry test/fixtures/pet-page.jade
147 silly gunzTarPerm extractEntry test/fixtures/pet.html
148 silly gunzTarPerm extractEntry test/fixtures/pet.jade
149 silly gunzTarPerm extractEntry test/fixtures/scripts.jade
150 silly gunzTarPerm extractEntry test/fixtures/super-pet.html
151 silly gunzTarPerm extractEntry test/fixtures/super-pet.jade
152 silly gunzTarPerm extractEntry test/fixtures/test.css
153 silly gunzTarPerm extractEntry test/fixtures/test.html
154 silly gunzTarPerm extractEntry test/fixtures/user-layout.jade
155 silly gunzTarPerm extractEntry test/fixtures/user.jade
156 silly gunzTarPerm extractEntry test/fixtures/users.html
157 silly gunzTarPerm extractEntry test/fixtures/users.jade
158 silly gunzTarPerm extractEntry test/fixtures/yield-before-conditional-head.jade
159 silly gunzTarPerm extractEntry test/fixtures/yield-before-conditional.html
160 silly gunzTarPerm extractEntry test/fixtures/yield-before-conditional.jade
161 silly gunzTarPerm extractEntry test/fixtures/yield-head.jade
162 silly gunzTarPerm extractEntry test/fixtures/yield-title-head.jade
163 silly gunzTarPerm extractEntry test/fixtures/yield-title.html
164 silly gunzTarPerm extractEntry test/fixtures/yield-title.jade
165 silly gunzTarPerm extractEntry test/fixtures/yield.html
166 silly gunzTarPerm extractEntry test/fixtures/yield.jade
167 silly gunzTarPerm extractEntry test/fixtures/append/app-layout.jade
168 silly gunzTarPerm extractEntry test/fixtures/append/layout.jade
169 silly gunzTarPerm extractEntry test/fixtures/append/page.html
170 silly gunzTarPerm extractEntry test/fixtures/append/page.jade
171 silly gunzTarPerm extractEntry test/fixtures/append-without-block/app-layout.jade
172 silly gunzTarPerm extractEntry test/fixtures/append-without-block/layout.jade
173 silly gunzTarPerm extractEntry test/fixtures/append-without-block/page.jade
174 silly gunzTarPerm extractEntry test/fixtures/prepend/app-layout.jade
175 silly gunzTarPerm extractEntry test/fixtures/prepend/layout.jade
176 silly gunzTarPerm extractEntry test/fixtures/prepend/page.html
177 silly gunzTarPerm extractEntry test/fixtures/prepend/page.jade
178 silly gunzTarPerm extractEntry test/fixtures/prepend-without-block/layout.jade
179 silly gunzTarPerm extractEntry test/fixtures/prepend-without-block/app-layout.jade
180 silly gunzTarPerm extractEntry test/fixtures/prepend-without-block/page.html
181 silly gunzTarPerm extractEntry test/fixtures/prepend-without-block/page.jade
182 warn excluding symbolic link lib/index.js -> jade.js
183 verbose read json /home/jcole/tmp/npm-5179/1383191856118-0.285349850775674/package/package.json
184 silly lockFile f2e4b5e9-856118-0-285349850775674-package /home/jcole/tmp/npm-5179/1383191856118-0.285349850775674/package
185 silly lockFile f2e4b5e9-856118-0-285349850775674-package /home/jcole/tmp/npm-5179/1383191856118-0.285349850775674/package
186 silly lockFile 34eb0890-856118-0-285349850775674-tmp-tgz /home/jcole/tmp/npm-5179/1383191856118-0.285349850775674/tmp.tgz
187 silly lockFile 34eb0890-856118-0-285349850775674-tmp-tgz /home/jcole/tmp/npm-5179/1383191856118-0.285349850775674/tmp.tgz
188 verbose from cache /home/jcole/tmp/npm-5179/1383191856118-0.285349850775674/package/package.json
189 verbose tar pack [ '/home/jcole/.npm/jade/0.20.0/package.tgz',
189 verbose tar pack   '/home/jcole/tmp/npm-5179/1383191856118-0.285349850775674/package' ]
190 verbose tarball /home/jcole/.npm/jade/0.20.0/package.tgz
191 verbose folder /home/jcole/tmp/npm-5179/1383191856118-0.285349850775674/package
192 silly lockFile f2e4b5e9-856118-0-285349850775674-package /home/jcole/tmp/npm-5179/1383191856118-0.285349850775674/package
193 verbose lock /home/jcole/tmp/npm-5179/1383191856118-0.285349850775674/package /home/jcole/.npm/f2e4b5e9-856118-0-285349850775674-package.lock
194 silly lockFile 0b7226b5-cole-npm-jade-0-20-0-package-tgz /home/jcole/.npm/jade/0.20.0/package.tgz
195 verbose lock /home/jcole/.npm/jade/0.20.0/package.tgz /home/jcole/.npm/0b7226b5-cole-npm-jade-0-20-0-package-tgz.lock
196 silly lockFile f2e4b5e9-856118-0-285349850775674-package /home/jcole/tmp/npm-5179/1383191856118-0.285349850775674/package
197 silly lockFile f2e4b5e9-856118-0-285349850775674-package /home/jcole/tmp/npm-5179/1383191856118-0.285349850775674/package
198 silly lockFile 0b7226b5-cole-npm-jade-0-20-0-package-tgz /home/jcole/.npm/jade/0.20.0/package.tgz
199 silly lockFile 0b7226b5-cole-npm-jade-0-20-0-package-tgz /home/jcole/.npm/jade/0.20.0/package.tgz
200 silly lockFile c95a8859-me-jcole-npm-jade-0-20-0-package /home/jcole/.npm/jade/0.20.0/package
201 verbose lock /home/jcole/.npm/jade/0.20.0/package /home/jcole/.npm/c95a8859-me-jcole-npm-jade-0-20-0-package.lock
202 silly lockFile c95a8859-me-jcole-npm-jade-0-20-0-package /home/jcole/.npm/jade/0.20.0/package
203 silly lockFile c95a8859-me-jcole-npm-jade-0-20-0-package /home/jcole/.npm/jade/0.20.0/package
204 verbose tar unpack /home/jcole/.npm/jade/0.20.0/package.tgz
205 silly lockFile c95a8859-me-jcole-npm-jade-0-20-0-package /home/jcole/.npm/jade/0.20.0/package
206 verbose lock /home/jcole/.npm/jade/0.20.0/package /home/jcole/.npm/c95a8859-me-jcole-npm-jade-0-20-0-package.lock
207 silly lockFile 0b7226b5-cole-npm-jade-0-20-0-package-tgz /home/jcole/.npm/jade/0.20.0/package.tgz
208 verbose lock /home/jcole/.npm/jade/0.20.0/package.tgz /home/jcole/.npm/0b7226b5-cole-npm-jade-0-20-0-package-tgz.lock
209 silly gunzTarPerm modes [ '755', '644' ]
210 silly gunzTarPerm extractEntry package.json
211 silly gunzTarPerm extractEntry .npmignore
212 silly gunzTarPerm extractEntry LICENSE
213 silly gunzTarPerm extractEntry index.js
214 silly gunzTarPerm extractEntry runtime.min.js
215 silly gunzTarPerm extractEntry jade.min.js
216 silly gunzTarPerm extractEntry runtime.js
217 silly gunzTarPerm extractEntry jade.js
218 silly gunzTarPerm extractEntry .travis.yml
219 silly gunzTarPerm extractEntry .gitmodules
220 silly gunzTarPerm extractEntry lib/filters.js
221 silly gunzTarPerm extractEntry lib/parser.js
222 silly gunzTarPerm extractEntry lib/runtime.js
223 silly gunzTarPerm extractEntry lib/jade.js
224 silly gunzTarPerm extractEntry lib/lexer.js
225 silly gunzTarPerm extractEntry lib/compiler.js
226 silly gunzTarPerm extractEntry lib/self-closing.js
227 silly gunzTarPerm extractEntry lib/utils.js
228 silly gunzTarPerm extractEntry lib/doctypes.js
229 silly gunzTarPerm extractEntry lib/inline-tags.js
230 silly gunzTarPerm extractEntry lib/nodes/node.js
231 silly gunzTarPerm extractEntry lib/nodes/code.js
232 silly gunzTarPerm extractEntry lib/nodes/block-comment.js
233 silly gunzTarPerm extractEntry lib/nodes/case.js
234 silly gunzTarPerm extractEntry lib/nodes/each.js
235 silly gunzTarPerm extractEntry lib/nodes/literal.js
236 silly gunzTarPerm extractEntry lib/nodes/comment.js
237 silly gunzTarPerm extractEntry lib/nodes/mixin.js
238 silly gunzTarPerm extractEntry lib/nodes/tag.js
239 silly gunzTarPerm extractEntry lib/nodes/block.js
240 silly gunzTarPerm extractEntry lib/nodes/filter.js
241 silly gunzTarPerm extractEntry lib/nodes/doctype.js
242 silly gunzTarPerm extractEntry lib/nodes/index.js
243 silly gunzTarPerm extractEntry lib/nodes/text.js
244 silly gunzTarPerm extractEntry Readme.md
245 silly gunzTarPerm extractEntry Makefile
246 silly gunzTarPerm extractEntry bin/jade
247 silly gunzTarPerm extractEntry testing/index.js
248 silly gunzTarPerm extractEntry testing/user.jade
249 silly gunzTarPerm extractEntry testing/head.jade
250 silly gunzTarPerm extractEntry testing/index.jade
251 silly gunzTarPerm extractEntry testing/layout.jade
252 silly gunzTarPerm extractEntry History.md
253 verbose read json /home/jcole/.npm/jade/0.20.0/package/package.json
254 silly lockFile c95a8859-me-jcole-npm-jade-0-20-0-package /home/jcole/.npm/jade/0.20.0/package
255 silly lockFile c95a8859-me-jcole-npm-jade-0-20-0-package /home/jcole/.npm/jade/0.20.0/package
256 silly lockFile 0b7226b5-cole-npm-jade-0-20-0-package-tgz /home/jcole/.npm/jade/0.20.0/package.tgz
257 silly lockFile 0b7226b5-cole-npm-jade-0-20-0-package-tgz /home/jcole/.npm/jade/0.20.0/package.tgz
258 silly shasum updated bytes 40960
259 silly shasum updated bytes 10934
260 info shasum 0b9e705e93d7d1be9217d63c74bfc19a951b8261
260 info shasum /home/jcole/.npm/jade/0.20.0/package.tgz
261 verbose from cache /home/jcole/.npm/jade/0.20.0/package/package.json
262 verbose chmod /home/jcole/.npm/jade/0.20.0/package.tgz 644
263 verbose chown /home/jcole/.npm/jade/0.20.0/package.tgz [ 0, 0 ]
264 silly lockFile 2bc36025-y-npmjs-org-jade-jade-0-20-0-tgz https://registry.npmjs.org/jade/-/jade-0.20.0.tgz
265 silly lockFile 2bc36025-y-npmjs-org-jade-jade-0-20-0-tgz https://registry.npmjs.org/jade/-/jade-0.20.0.tgz
266 silly lockFile a24c3910-jade-0-20-0 jade@0.20.0
267 silly lockFile a24c3910-jade-0-20-0 jade@0.20.0
268 silly resolved [ { name: 'jade',
268 silly resolved     description: 'Jade template engine',
268 silly resolved     version: '0.20.0',
268 silly resolved     author: { name: 'TJ Holowaychuk', email: 'tj@vision-media.ca' },
268 silly resolved     repository: { type: 'git', url: 'git://github.com/visionmedia/jade' },
268 silly resolved     main: './index.js',
268 silly resolved     bin: { jade: './bin/jade' },
268 silly resolved     dependencies: { commander: '0.2.x', mkdirp: '>= 0.0.7' },
268 silly resolved     devDependencies:
268 silly resolved      { mocha: '*',
268 silly resolved        'coffee-script': '>= 0.0.1',
268 silly resolved        markdown: '>= 0.0.1',
268 silly resolved        stylus: '>= 0.0.1',
268 silly resolved        uubench: '0.0.1',
268 silly resolved        'uglify-js': '>= 1.0.7' },
268 silly resolved     scripts: { prepublish: 'npm prune' },
268 silly resolved     engines: { node: '>= 0.1.98' },
268 silly resolved     readme: ' [![Build Status](https://secure.travis-ci.org/visionmedia/jade.png)](http://travis-ci.org/visionmedia/jade)\n\n# Jade - template engine\n\n Jade is a high performance template engine heavily influenced by [Haml](http://haml-lang.com)\n and implemented with JavaScript for [node](http://nodejs.org).\n\n## Features\n\n  - client-side support\n  - great readability\n  - flexible indentation\n  - block-expansion\n  - mixins\n  - static includes\n  - attribute interpolation\n  - code is escaped by default for security\n  - contextual error reporting at compile &amp; run time\n  - executable for compiling jade templates via the command line\n  - html 5 mode (using the _!!! 5_ doctype)\n  - optional memory caching\n  - combine dynamic and static tag classes\n  - parse tree manipulation via _filters_\n  - template inheritance\n  - block append / prepend\n  - supports [Express JS](http://expressjs.com) out of the box\n  - transparent iteration over objects, arrays, and even non-enumerables via `each`\n  - block comments\n  - no tag prefix\n  - AST filters\n  - filters\n    - :stylus must have [stylus](http://github.com/LearnBoost/stylus) installed\n    - :sass must have [sass.js](http://github.com/visionmedia/sass.js) installed\n    - :less must have [less.js](http://github.com/cloudhead/less.js) installed\n    - :markdown must have [markdown-js](http://github.com/evilstreak/markdown-js) installed or [node-discount](http://github.com/visionmedia/node-discount)\n    - :cdata\n    - :coffeescript must have [coffee-script](http://jashkenas.github.com/coffee-script/) installed\n  - [Emacs Mode](https://github.com/brianc/jade-mode)\n  - [Vim Syntax](https://github.com/digitaltoad/vim-jade)\n  - [TextMate Bundle](http://github.com/miksago/jade-tmbundle)\n  - [Screencasts](http://tjholowaychuk.com/post/1004255394/jade-screencast-template-engine-for-nodejs)\n  - [html2jade](https://github.com/donpark/html2jade) converter\n\n## Implementations\n\n  - [php](http://github.com/everzet/jade.php)\n  - [scala](http://scalate.fusesource.org/versions/snapshot/documentation/scaml-reference.html)\n  - [ruby](http://github.com/stonean/slim)\n  - [python](https://github.com/SyrusAkbary/pyjade)\n\n## Installation\n\nvia npm:\n\n    npm install jade\n\n## Browser Support\n\n To compile jade to a single file compatible for client-side use simply execute:\n \n    $ make jade.js\n\n Alternatively, if uglifyjs is installed via npm (`npm install uglify-js`) you may execute the following which will create both files. However each release builds these for you.\n \n    $ make jade.min.js\n\n  By default Jade instruments templates with line number statements such as `__.lineno = 3` for debugging purposes. When used in a browser it\'s useful to minimize this boiler plate, you can do so by passing the option `{ compileDebug: false }`. The following template\n  \n    p Hello #{name}\n\n Can then be as small as the following generated function:\n\n```js\nfunction anonymous(locals, attrs, escape, rethrow) {\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    buf.push(\'\\n<p>Hello \' + escape((interp = name) == null ? \'\' : interp) + \'\\n</p>\');\n  }\n  return buf.join("");\n}\n```\n\n  Through the use of Jade\'s `./runtime.js` you may utilize these pre-compiled templates on the client-side _without_ Jade itself, all you need is the associated utility functions (in runtime.js), which are then available as `jade.attrs`, `jade.escape` etc. To enable this you should pass `{ client: true }` to `jade.compile()` to tell Jade to reference the helper functions\n  via `jade.attrs`, `jade.escape` etc.\n\n```js\nfunction anonymous(locals, attrs, escape, rethrow) {\n  var attrs = jade.attrs, escape = jade.escape, rethrow = jade.rethrow;\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    buf.push(\'\\n<p>Hello \' + escape((interp = name) == null ? \'\' : interp) + \'\\n</p>\');\n  }\n  return buf.join("");\n}\n```\n\n## Public API\n\n```javascript\n    var jade = require(\'jade\');\n\n    // Compile a function\n    var fn = jade.compile(\'string of jade\', options);\n    fn(locals);\n```\n\n### Options\n\n - `self`      Use a `self` namespace to hold the locals. _false by default_\n - `locals`    Local variable object\n - `filename`  Used in exceptions, and required when using includes\n - `debug`     Outputs tokens and function body generated\n - `compiler`  Compiler to replace jade\'s default\n - `compileDebug`  When `false` no debug instrumentation is compiled\n\n## Syntax\n\n### Line Endings\n\n**CRLF** and **CR** are converted to **LF** before parsing.\n\n### Tags\n\nA tag is simply a leading word:\n\n    html\n\nfor example is converted to `<html></html>`\n\ntags can also have ids:\n\n    div#container\n\nwhich would render `<div id="container"></div>`\n\nhow about some classes?\n\n    div.user-details\n\nrenders `<div class="user-details"></div>`\n\nmultiple classes? _and_ an id? sure:\n\n    div#foo.bar.baz\n\nrenders `<div id="foo" class="bar baz"></div>`\n\ndiv div div sure is annoying, how about:\n\n    #foo\n    .bar\n\nwhich is syntactic sugar for what we have already been doing, and outputs:\n\n    `<div id="foo"></div><div class="bar"></div>`\n\n### Tag Text\n\nSimply place some content after the tag:\n\n    p wahoo!\n\nrenders `<p>wahoo!</p>`.\n\nwell cool, but how about large bodies of text:\n\n    p\n      | foo bar baz\n      | rawr rawr\n      | super cool\n      | go jade go\n\nrenders `<p>foo bar baz rawr.....</p>`\n\ninterpolation? yup! both types of text can utilize interpolation,\nif we passed `{ name: \'tj\', email: \'tj@vision-media.ca\' }` to the compiled function we can do the following:\n\n    #user #{name} &lt;#{email}&gt;\n\noutputs `<div id="user">tj &lt;tj@vision-media.ca&gt;</div>`\n\nActually want `#{}` for some reason? escape it!\n\n    p \\#{something}\n\nnow we have `<p>#{something}</p>`\n\nWe can also utilize the unescaped variant `!{html}`, so the following\nwill result in a literal script tag:\n\n    - var html = "<script></script>"\n    | !{html}\n\nNested tags that also contain text can optionally use a text block:\n\n    label\n      | Username:\n      input(name=\'user[name]\')\n\nor immediate tag text:\n\n    label Username:\n      input(name=\'user[name]\')\n\nTags that accept _only_ text such as `script` and `style` do not\nneed the leading `|` character, for example:\n\n      html\n        head\n          title Example\n          script\n            if (foo) {\n              bar();\n            } else {\n              baz();\n            }\n\nOnce again as an alternative, we may use a trailing \'.\' to indicate a text block, for example:\n\n      p.\n        foo asdf\n        asdf\n         asdfasdfaf\n         asdf\n        asd.\n\noutputs:\n\n        <p>foo asdf\n        asdf\n          asdfasdfaf\n          asdf\n        asd.\n        </p>\n\nThis however differs from a trailing \'.\' followed by a space, which although is ignored by the Jade parser, tells Jade that this period is a literal:\n\n    p .\n    \noutputs:\n\n    <p>.</p>\n\n\nIt should be noted that text blocks should be doubled escaped.  For example if you desire the following output.\n\n    </p>foo\\bar</p>\n\nuse:\n\n    p.\n      foo\\\\bar\n\n### Comments\n\nSingle line comments currently look the same as JavaScript comments,\naka "//" and must be placed on their own line:\n\n    // just some paragraphs\n    p foo\n    p bar\n\nwould output\n\n    <!-- just some paragraphs -->\n    <p>foo</p>\n    <p>bar</p>\n\nJade also supports unbuffered comments, by simply adding a hyphen:\n\n    //- will not output within markup\n    p foo\n    p bar\n\noutputting\n\n    <p>foo</p>\n    <p>bar</p>\n\n### Block Comments\n\n A block comment is legal as well:\n\n      body\n        //\n          #content\n            h1 Example\n\noutputting\n\n    <body>\n      <!--\n      <div id="content">\n        <h1>Example</h1>\n      </div>\n      -->\n    </body>\n\nJade supports conditional-comments as well, for example:\n\n    head\n      //if lt IE 8\n        script(src=\'/ie-sucks.js\')\n\noutputs:\n\n    <body>\n      <!--[if lt IE 8]>\n        <script src="/ie-sucks.js"></script>\n      <![endif]-->\n    </body>\n\n\n### Nesting\n\n Jade supports nesting to define the tags in a natural way:\n\n    ul\n      li.first\n        a(href=\'#\') foo\n      li\n        a(href=\'#\') bar\n      li.last\n        a(href=\'#\') baz\n\n### Block Expansion\n\n Block expansion allows you to create terse single-line nested tags,\n the following example is equivalent to the nesting example above.\n\n      ul\n        li.first: a(href=\'#\') foo\n        li: a(href=\'#\') bar\n        li.last: a(href=\'#\') baz\n\n### Case\n\n The case statement takes the following form:\n \n     html\n       body\n         friends = 10\n         case friends\n           when 0\n             p you have no friends\n           when 1\n             p you have a friend\n           default\n             p you have #{friends} friends\n\n Block expansion may also be used:\n \n     friends = 5\n\n     html\n       body\n         case friends\n           when 0: p you have no friends\n           when 1: p you have a friend\n           default: p you have #{friends} friends\n\n### Attributes\n\nJade currently supports \'(\' and \')\' as attribute delimiters.\n\n    a(href=\'/login\', title=\'View login page\') Login\n\nWhen a value is `undefined` or `null` the attribute is _not_ added,\nso this is fine, it will not compile \'something="null"\'.\n\n    div(something=null)\n\nBoolean attributes are also supported:\n\n    input(type="checkbox", checked)\n\nBoolean attributes with code will only output the attribute when `true`:\n\n    input(type="checkbox", checked=someValue)\n    \nMultiple lines work too:\n\n    input(type=\'checkbox\',\n      name=\'agreement\',\n      checked)\n\nMultiple lines without the comma work fine:\n\n    input(type=\'checkbox\'\n      name=\'agreement\'\n      checked)\n\nFunky whitespace? fine:\n\n\n    input(\n      type=\'checkbox\'\n      name=\'agreement\'\n      checked)\n\nColons work:\n\n    rss(xmlns:atom="atom")\n\nSuppose we have the `user` local `{ id: 12, name: \'tobi\' }`\nand we wish to create an anchor tag with `href` pointing to "/user/12"\nwe could use regular javascript concatenation:\n\n    a(href=\'/user/\' + user.id)= user.name\n\nor we could use jade\'s interpolation, which I added because everyone\nusing Ruby or CoffeeScript seems to think this is legal js..:\n\n   a(href=\'/user/#{user.id}\')= user.name\n\nThe `class` attribute is special-cased when an array is given,\nallowing you to pass an array such as `bodyClasses = [\'user\', \'authenticated\']` directly:\n\n    body(class=bodyClasses)\n\n### HTML\n\n Inline html is fine, we can use the pipe syntax to \n write arbitrary text, in this case some html:\n\n```\nhtml\n  body\n    | <h1>Title</h1>\n    | <p>foo bar baz</p>\n```\n\n Or we can use the trailing `.` to indicate to Jade that we\n only want text in this block, allowing us to omit the pipes:\n\n```\nhtml\n  body.\n    <h1>Title</h1>\n    <p>foo bar baz</p>\n```\n\n Both of these examples yield the same result:\n\n```\n<html><body><h1>Title</h1>\n<p>foo bar baz</p>\n</body></html>\n```\n\n The same rule applies for anywhere you can have text\n in jade, raw html is fine:\n\n```\nhtml\n  body\n    h1 User <em>#{name}</em>\n```\n\n### Doctypes\n\nTo add a doctype simply use `!!!`, or `doctype` followed by an optional value:\n\n    !!!\n\nWill output the _transitional_ doctype, however:\n\n    !!! 5\n\nor\n\n    !!! html\n\nor\n\n    doctype html\n\ndoctypes are case-insensitive, so the following are equivalent:\n\n    doctype Basic\n    doctype basic\n\nit\'s also possible to simply pass a doctype literal:\n\n    doctype html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN\n\nyielding:\n\n    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN>\n\nWill output the _html 5_ doctype. Below are the doctypes\ndefined by default, which can easily be extended:\n\n```javascript\n    var doctypes = exports.doctypes = {\n\t    \'5\': \'<!DOCTYPE html>\',\n\t    \'xml\': \'<?xml version="1.0" encoding="utf-8" ?>\',\n\t    \'default\': \'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\',\n\t    \'transitional\': \'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\',\n\t    \'strict\': \'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">\',\n\t    \'frameset\': \'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">\',\n\t    \'1.1\': \'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">\',\n\t    \'basic\': \'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN" "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">\',\n\t    \'mobile\': \'<!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.2//EN" "http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd">\'\n\t};\n```\n\nTo alter the default simply change:\n\n```javascript\n    jade.doctypes.default = \'whatever you want\';\n```\n\n## Filters\n\nFilters are prefixed with `:`, for example `:markdown` and\npass the following block of text to an arbitrary function for processing. View the _features_\nat the top of this document for available filters.\n\n    body\n      :markdown\n        Woah! jade _and_ markdown, very **cool**\n        we can even link to [stuff](http://google.com)\n\nRenders:\n\n       <body><p>Woah! jade <em>and</em> markdown, very <strong>cool</strong> we can even link to <a href="http://google.com">stuff</a></p></body>\n\n## Code\n\nJade currently supports three classifications of executable code. The first\nis prefixed by `-`, and is not buffered:\n\n    - var foo = \'bar\';\n\nThis can be used for conditionals, or iteration:\n\n    - for (var key in obj)\n      p= obj[key]\n\nDue to Jade\'s buffering techniques the following is valid as well:\n\n    - if (foo)\n      ul\n        li yay\n        li foo\n        li worked\n    - else\n      p oh no! didnt work\n\nHell, even verbose iteration:\n\n    - if (items.length)\n      ul\n        - items.forEach(function(item){\n          li= item\n        - })\n\nAnything you want!\n\nNext up we have _escaped_ buffered code, which is used to\nbuffer a return value, which is prefixed by `=`:\n\n    - var foo = \'bar\'\n    = foo\n    h1= foo\n\nWhich outputs `bar<h1>bar</h1>`. Code buffered by `=` is escaped \nby default for security, however to output unescaped return values\nyou may use `!=`:\n\n    p!= aVarContainingMoreHTML\n\n Jade also has designer-friendly variants, making the literal JavaScript\n more expressive and declarative. For example the following assignments\n are equivalent, and the expression is still regular javascript:\n \n     - var foo = \'foo \' + \'bar\'\n     foo = \'foo \' + \'bar\'\n\n  Likewise Jade has first-class `if`, `else if`, `else`, `until`, `while`, `unless` among others, however you must remember that the expressions are still regular javascript:\n\n     if foo == \'bar\'\n       ul\n         li yay\n         li foo\n         li worked\n     else\n       p oh no! didnt work  \n\n## Iteration\n\n Along with vanilla JavaScript Jade also supports a subset of\n constructs that allow you to create more designer-friendly templates,\n one of these constructs is `each`, taking the form:\n\n    each VAL[, KEY] in OBJ\n\nAn example iterating over an array:\n\n    - var items = ["one", "two", "three"]\n    each item in items\n      li= item\n\noutputs:\n\n    <li>one</li>\n    <li>two</li>\n    <li>three</li>\n\niterating an array with index:\n\n    items = ["one", "two", "three"]\n    each item, i in items\n      li #{item}: #{i}\n\noutputs:\n\n    <li>one: 0</li>\n    <li>two: 1</li>\n    <li>three: 2</li>\n\niterating an object\'s keys and values:\n\n    obj = { foo: \'bar\' }\n    each val, key in obj\n      li #{key}: #{val}\n\nwould output `<li>foo: bar</li>`\n\nInternally Jade converts these statements to regular\nJavaScript loops such as `users.forEach(function(user){`,\nso lexical scope and nesting applies as it would with regular\nJavaScript:\n\n    each user in users\n      each role in user.roles\n        li= role\n\n You may also use `for` if you prefer:\n \n    for user in users\n      for role in user.roles\n        li= role\n\n## Conditionals\n\n Jade conditionals are equivalent to those using the code (`-`) prefix,\n however allow you to ditch parenthesis to become more designer friendly,\n however keep in mind the expression given is _regular_ JavaScript:\n\n    for user in users\n      if user.role == \'admin\'\n        p #{user.name} is an admin\n      else\n        p= user.name\n\n is equivalent to the following using vanilla JavaScript literals:\n\n     for user in users\n       - if (user.role == \'admin\')\n         p #{user.name} is an admin\n       - else\n         p= user.name\n\n  Jade also provides have `unless` which is equivalent to `if (!(expr))`:\n\n     for user in users\n       unless user.isAnonymous\n         p\n           | Click to view\n           a(href=\'/users/\' + user.id)= user.name \n\n## Template inheritance\n\n  Jade supports template inheritance via the `block` and `extends` keywords. A block is simply a "block" of Jade that may be replaced within a child template, this process is recursive. To activate template inheritance in Express 2.x you must add: `app.set(\'view options\', { layout: false });`.\n  \n  Jade blocks can provide default content if desired, however optional as shown below by `block scripts`, `block content`, and `block foot`.\n\n```\nhtml\n  head\n    h1 My Site - #{title}\n    block scripts\n      script(src=\'/jquery.js\')\n  body\n    block content\n    block foot\n      #footer\n        p some footer content\n```\n\n  Now to extend the layout, simply create a new file and use the `extends` directive as shown below, giving the path (with or without the .jade extension). You may now define one or more blocks that will override the parent block content, note that here the `foot` block is _not_ redefined and will output "some footer content".\n\n```\nextends layout\n\nblock scripts\n  script(src=\'/jquery.js\')\n  script(src=\'/pets.js\')\n\nblock content\n  h1= title\n  each pet in pets\n    include pet\n```\n\n  It\'s also possible to override a block to provide additional blocks, as shown in the following example where `content` now exposes a `sidebar` and `primary` block for overriding, or the child template could override `content` all together.\n\n```\nextends regular-layout\n\nblock content\n  .sidebar\n    block sidebar\n      p nothing\n  .primary\n    block primary\n      p nothing\n```\n\n## Block append / prepend\n\n Jade allows you to _replace_ (default), _prepend_, or _append_ blocks. Suppose for example you have default scripts in a "head" block that you wish to utilize on _every_ page, you might do this:\n\n```\nhtml\n  head\n    block head\n      script(src=\'/vendor/jquery.js\')\n      script(src=\'/vendor/caustic.js\')\n    body\n      block content\n```\n\n Now suppose you have a page of your application for a JavaScript game, you want some game related scripts as well as these defaults, you can simply `append` the block:\n\n```\ninclude layout\n\nblock append head\n  script(src=\'/vendor/three.js\')\n  script(src=\'/game.js\')\n```\n\n  When using `block append` or `block prepend` the `block` is optional:\n\n```\ninclude layout\n\nappend head\n  script(src=\'/vendor/three.js\')\n  script(src=\'/game.js\')\n```\n\n## Includes\n\n Includes allow you to statically include chunks of Jade,\n or other content like css, or html which lives in separate files. The classical example is including a header and footer. Suppose we have the following directory structure:\n\n     ./layout.jade\n     ./includes/\n       ./head.jade\n       ./tail.jade\n\nand the following _layout.jade_:\n\n      html\n        include includes/head  \n        body\n          h1 My Site\n          p Welcome to my super amazing site.\n          include includes/foot\n\nboth includes _includes/head_ and _includes/foot_ are\nread relative to the `filename` option given to _layout.jade_,\nwhich should be an absolute path to this file, however Express does this for you. Include then parses these files, and injects the AST produced to render what you would expect:\n\n```html\n<html>\n  <head>\n    <title>My Site</title>\n    <script src="/javascripts/jquery.js">\n    </script><script src="/javascripts/app.js"></script>\n  </head>\n  <body>\n    <h1>My Site</h1>\n    <p>Welcome to my super lame site.</p>\n    <div id="footer">\n      <p>Copyright>(c) foobar</p>\n    </div>\n  </body>\n</html>\n```\n\n As mentioned `include` can be used to include other content\n such as html or css. By providing an extension Jade will not\n assume that the file is Jade source and will include it as\n a literal:\n\n```\nhtml\n  body\n    include content.html\n```\n\n  Include directives may also accept a block, in which case the\n  the given block will be appended to the _last_ block defined\n  in the file. For example if `head.jade` contains:\n\n```\nhead\n  script(src=\'/jquery.js\')\n```\n\n We may append values by providing a block to `include head`\n as shown below, adding the two scripts.\n\n```\nhtml\n  include head\n    script(src=\'/foo.js\')\n    script(src=\'/bar.js\')\n  body\n    h1 test\n```\n\n You may also `yield` within an included template, allowing you to explicitly mark where the block given to `include` will be placed. Suppose for example you wish to prepend scripts rather than append, you might do the following:\n \n```\nhead\n  yield\n  script(src=\'/jquery.js\')\n  script(src=\'/jquery.ui.js\')\n```\n\n Since included Jade is parsed and literally merges the AST, lexically scoped variables function as if the included Jade was written right in the same file. This means `include` may be used as sort of partial, for example support we have `user.jade` which utilizes a `user` variable.\n \n```\nh1= user.name\np= user.occupation\n```\n\nWe could then simply `include user` while iterating users, and since the `user` variable is already defined within the loop the included template will have access to it.\n\n```\nusers = [{ name: \'Tobi\', occupation: \'Ferret\' }]\n\neach user in users\n  .user\n    include user\n```\n\nyielding:\n\n```html\n<div class="user">\n  <h1>Tobi</h1>\n  <p>Ferret</p>\n</div>\n```\n\nIf we wanted to expose a different variable name as `user` since `user.jade` references that name, we could simply define a new variable as shown here with `user = person`:\n\n```\neach person in users\n  .user\n    user = person\n    include user\n```\n\n## Mixins\n\n Mixins are converted to regular JavaScript functions in\n the compiled template that Jade constructs. Mixins may\n take arguments, though not required:\n\n      mixin list\n        ul\n          li foo\n          li bar\n          li baz\n\n  Utilizing a mixin without args looks similar, just without a block:\n  \n      h2 Groceries\n      mixin list\n\n  Mixins may take one or more arguments as well, the arguments\n  are regular javascripts expressions, so for example the following:\n\n      mixin pets(pets)\n        ul.pets\n          - each pet in pets\n            li= pet\n\n      mixin profile(user)\n        .user\n          h2= user.name\n          mixin pets(user.pets)\n\n   Would yield something similar to the following html:\n\n```html\n<div class="user">\n  <h2>tj</h2>\n  <ul class="pets">\n    <li>tobi</li>\n    <li>loki</li>\n    <li>jane</li>\n    <li>manny</li>\n  </ul>\n</div>\n```\n\n## Generated Output\n\n Suppose we have the following Jade:\n\n```\n- var title = \'yay\'\nh1.title #{title}\np Just an example\n```\n\n When the `compileDebug` option is not explicitly `false`, Jade\n will compile the function instrumented with `__.lineno = n;`, which\n in the event of an exception is passed to `rethrow()` which constructs\n a useful message relative to the initial Jade input.\n\n```js\nfunction anonymous(locals) {\n  var __ = { lineno: 1, input: "- var title = \'yay\'\\nh1.title #{title}\\np Just an example", filename: "testing/test.js" };\n  var rethrow = jade.rethrow;\n  try {\n    var attrs = jade.attrs, escape = jade.escape;\n    var buf = [];\n    with (locals || {}) {\n      var interp;\n      __.lineno = 1;\n       var title = \'yay\'\n      __.lineno = 2;\n      buf.push(\'<h1\');\n      buf.push(attrs({ "class": (\'title\') }));\n      buf.push(\'>\');\n      buf.push(\'\' + escape((interp = title) == null ? \'\' : interp) + \'\');\n      buf.push(\'</h1>\');\n      __.lineno = 3;\n      buf.push(\'<p>\');\n      buf.push(\'Just an example\');\n      buf.push(\'</p>\');\n    }\n    return buf.join("");\n  } catch (err) {\n    rethrow(err, __.input, __.filename, __.lineno);\n  }\n}\n```\n\nWhen the `compileDebug` option _is_ explicitly `false`, this instrumentation\nis stripped, which is very helpful for light-weight client-side templates. Combining Jade\'s options with the `./runtime.js` file in this repo allows you\nto toString() compiled templates and avoid running the entire Jade library on\nthe client, increasing performance, and decreasing the amount of JavaScript\nrequired.\n\n```js\nfunction anonymous(locals) {\n  var attrs = jade.attrs, escape = jade.escape;\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    var title = \'yay\'\n    buf.push(\'<h1\');\n    buf.push(attrs({ "class": (\'title\') }));\n    buf.push(\'>\');\n    buf.push(\'\' + escape((interp = title) == null ? \'\' : interp) + \'\');\n    buf.push(\'</h1>\');\n    buf.push(\'<p>\');\n    buf.push(\'Just an example\');\n    buf.push(\'</p>\');\n  }\n  return buf.join("");\n}\n```\n\n## Example Makefile\n\n  Below is an example Makefile used to compile _pages/*.jade_\n  into _pages/*.html_ files by simply executing `make`.\n \n```make\nJADE = $(shell find pages/*.jade)\nHTML = $(JADE:.jade=.html)\n\nall: $(HTML)\n\t\n%.html: %.jade\n\tjade < $< --path $< > $@\n\nclean:\n\trm -f $(HTML)\n\n.PHONY: clean\n```\n\nthis can be combined with the `watch(1)` command to produce\na watcher-like behaviour:\n\n     $ watch make\n\n## jade(1)\n\n```\n\nUsage: jade [options] [dir|file ...]\n\nOptions:\n\n  -h, --help         output usage information\n  -v, --version      output the version number\n  -o, --obj <str>    javascript options object\n  -O, --out <dir>    output the compiled html to <dir>\n  -p, --path <path>  filename used to resolve includes over stdio\n\nExamples:\n\n  # translate jade the templates dir\n  $ jade templates\n\n  # create {foo,bar}.html\n  $ jade {foo,bar}.jade\n\n  # jade over stdio\n  $ jade < my.jade > my.html\n\n  # jade over stdio specifying filename to resolve include directives\n  $ jade < my.jade -p my.jade > my.html\n\n  # jade over stdio\n  $ echo "h1 Jade!" | jade\n\n  # foo, bar dirs rendering to /tmp\n  $ jade foo bar --out /tmp \n\n```\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2009-2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
268 silly resolved     readmeFilename: 'Readme.md',
268 silly resolved     _id: 'jade@0.20.0',
268 silly resolved     dist: { shasum: '0b9e705e93d7d1be9217d63c74bfc19a951b8261' },
268 silly resolved     _from: 'jade@0.20.0',
268 silly resolved     _resolved: 'https://registry.npmjs.org/jade/-/jade-0.20.0.tgz' } ]
269 info install jade@0.20.0 into /home/jcole/code/som/WikiNets
270 info installOne jade@0.20.0
271 verbose from cache /home/jcole/.npm/jade/0.20.0/package/package.json
272 info /home/jcole/code/som/WikiNets/node_modules/jade unbuild
273 verbose from cache /home/jcole/code/som/WikiNets/node_modules/jade/package.json
274 info preuninstall jade@0.20.0
275 info uninstall jade@0.20.0
276 verbose true,/home/jcole/code/som/WikiNets/node_modules,/home/jcole/code/som/WikiNets/node_modules unbuild jade@0.20.0
277 verbose /home/jcole/code/som/WikiNets/node_modules/.bin,[object Object] binRoot
278 info /home/jcole/code/som/WikiNets/node_modules/jade unbuild
279 verbose read json /home/jcole/code/som/WikiNets/node_modules/jade/package.json
280 info preuninstall jade@0.20.0
281 info uninstall jade@0.20.0
282 verbose true,/home/jcole/code/som/WikiNets/node_modules,/home/jcole/code/som/WikiNets/node_modules unbuild jade@0.20.0
283 verbose /home/jcole/code/som/WikiNets/node_modules/.bin,[object Object] binRoot
284 info postuninstall jade@0.20.0
285 error Refusing to delete: /home/jcole/code/som/WikiNets/node_modules/.bin/jade not in /home/jcole/code/som/WikiNets/node_modules/jade
File exists: /home/jcole/code/som/WikiNets/node_modules/.bin/jade
Move it away, and try again.
286 error System Linux 3.0.0-12-generic
287 error command "nodejs" "/usr/bin/npm" "install" "jade"
288 error cwd /home/jcole/code/som/WikiNets/static
289 error node -v v0.8.20
290 error npm -v 1.2.11
291 error path /home/jcole/code/som/WikiNets/node_modules/.bin/jade
292 error code EEXIST
293 verbose exit [ 1, true ]
